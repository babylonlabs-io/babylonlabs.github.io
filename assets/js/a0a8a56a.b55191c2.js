"use strict";(self.webpackChunkdocument_sample=self.webpackChunkdocument_sample||[]).push([[8838],{8151:(n,e,o)=>{o.r(e),o.d(e,{assets:()=>r,contentTitle:()=>i,default:()=>b,frontMatter:()=>t,metadata:()=>l,toc:()=>d});var c=o(4848),a=o(8453);const t={id:"Babylond_query_ibc_channel_connections",sidebar_label:"babylond query ibc channel connections",hide_table_of_contents:!0},i="babylond query ibc channel connections",l={id:"cli/babylond/BabylondQuery/Babylond_query_ibc/Babylond_query_ibc_channel/Babylond_query_ibc_channel_connections",title:"babylond query ibc channel connections",description:"Querying all channels associated with a connection.",source:"@site/docs/cli/babylond/BabylondQuery/Babylond_query_ibc/Babylond_query_ibc_channel/Babylond_query_ibc_channel_connections.md",sourceDirName:"cli/babylond/BabylondQuery/Babylond_query_ibc/Babylond_query_ibc_channel",slug:"/cli/babylond/BabylondQuery/Babylond_query_ibc/Babylond_query_ibc_channel/Babylond_query_ibc_channel_connections",permalink:"/docs/cli/babylond/BabylondQuery/Babylond_query_ibc/Babylond_query_ibc_channel/Babylond_query_ibc_channel_connections",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/cli/babylond/BabylondQuery/Babylond_query_ibc/Babylond_query_ibc_channel/Babylond_query_ibc_channel_connections.md",tags:[],version:"current",frontMatter:{id:"Babylond_query_ibc_channel_connections",sidebar_label:"babylond query ibc channel connections",hide_table_of_contents:!0},sidebar:"docs",previous:{title:"babylond query ibc channel client-state",permalink:"/docs/cli/babylond/BabylondQuery/Babylond_query_ibc/Babylond_query_ibc_channel/Babylond_query_ibc_channel_client-state"},next:{title:"babylond query ibc channel end",permalink:"/docs/cli/babylond/BabylondQuery/Babylond_query_ibc/Babylond_query_ibc_channel/Babylond_query_ibc_channel_end"}},r={},d=[{value:"query ibc channel connections command",id:"query-ibc-channel-connections-command",level:2},{value:"Example Command",id:"example-command",level:3},{value:"Options",id:"options",level:2},{value:"Options Inherited from Parent Commands",id:"options-inherited-from-parent-commands",level:2}];function s(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.R)(),...n.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(e.h1,{id:"babylond-query-ibc-channel-connections",children:"babylond query ibc channel connections"}),"\n",(0,c.jsx)(e.p,{children:"Querying all channels associated with a connection."}),"\n",(0,c.jsx)(e.h2,{id:"query-ibc-channel-connections-command",children:"query ibc channel connections command"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{children:"babylond query ibc channel connections [connection-id] [flags]\n"})}),"\n",(0,c.jsx)(e.h3,{id:"example-command",children:"Example Command"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{children:"$ babylond query ibc channel connections [connection-id]\n"})}),"\n",(0,c.jsx)(e.h2,{id:"options",children:"Options"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{children:'      --count-total       count total number of records in channels associated with a connection to query for\n      --height int        Use a specific height to query state at (this can error if the node is pruning state)\n  -h, --help              help for connections\n      --limit uint        pagination limit of channels associated with a connection to query for (default 100)\n      --node string       <host>:<port> to Tendermint RPC interface for this chain (default "tcp://localhost:26657")\n      --offset uint       pagination offset of channels associated with a connection to query for\n  -o, --output string     Output format (text|json) (default "text")\n      --page uint         pagination page of channels associated with a connection to query for. This sets offset to a multiple of limit (default 1)\n      --page-key string   pagination page-key of channels associated with a connection to query for\n      --reverse           results are sorted in descending order\n'})}),"\n",(0,c.jsx)(e.h2,{id:"options-inherited-from-parent-commands",children:"Options Inherited from Parent Commands"}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{children:'      --chain-id string     The network chain ID\n      --home string         directory for config and data (default "/home/<yourSystemUsername>/.babylond")\n      --log_format string   The logging format (json|plain) (default "plain")\n      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")\n      --trace               print out full stack trace on errors\n'})})]})}function b(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,c.jsx)(e,{...n,children:(0,c.jsx)(s,{...n})}):s(n)}},8453:(n,e,o)=>{o.d(e,{R:()=>i,x:()=>l});var c=o(6540);const a={},t=c.createContext(a);function i(n){const e=c.useContext(t);return c.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:i(n.components),c.createElement(t.Provider,{value:e},n.children)}}}]);