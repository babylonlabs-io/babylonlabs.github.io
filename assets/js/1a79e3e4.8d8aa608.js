"use strict";(self.webpackChunkdocument_sample=self.webpackChunkdocument_sample||[]).push([[3230],{5166:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>r,contentTitle:()=>d,default:()=>g,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var a=n(4848),i=n(8453);const o={id:"babylond_tx_staking_edit-validator",sidebar_label:"babylond tx staking edit-validator",hide_table_of_contents:!0},d="babylond tx staking edit-validator",s={id:"cli/babylond/Babylond_tx/Babylond_tx_staking/babylond_tx_staking_edit-validator",title:"babylond tx staking edit-validator",description:"Edit an existing validator account.",source:"@site/docs/cli/babylond/Babylond_tx/Babylond_tx_staking/Babylond_tx_staking_edit-validator.md",sourceDirName:"cli/babylond/Babylond_tx/Babylond_tx_staking",slug:"/cli/babylond/Babylond_tx/Babylond_tx_staking/babylond_tx_staking_edit-validator",permalink:"/docs/cli/babylond/Babylond_tx/Babylond_tx_staking/babylond_tx_staking_edit-validator",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/cli/babylond/Babylond_tx/Babylond_tx_staking/Babylond_tx_staking_edit-validator.md",tags:[],version:"current",frontMatter:{id:"babylond_tx_staking_edit-validator",sidebar_label:"babylond tx staking edit-validator",hide_table_of_contents:!0},sidebar:"docs",previous:{title:"babylond tx staking delegate",permalink:"/docs/cli/babylond/Babylond_tx/Babylond_tx_staking/babylond_tx_staking_delegate"},next:{title:"babylond tx staking redelegate",permalink:"/docs/cli/babylond/Babylond_tx/Babylond_tx_staking/babylond_tx_staking_redelegate"}},r={},l=[{value:"tx staking edit-validator command",id:"tx-staking-edit-validator-command",level:2},{value:"Options",id:"options",level:2},{value:"Options Inherited from Parent Commands",id:"options-inherited-from-parent-commands",level:2}];function c(t){const e={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...t.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.h1,{id:"babylond-tx-staking-edit-validator",children:"babylond tx staking edit-validator"}),"\n",(0,a.jsx)(e.p,{children:"Edit an existing validator account."}),"\n",(0,a.jsx)(e.h2,{id:"tx-staking-edit-validator-command",children:"tx staking edit-validator command"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:"babylond tx staking edit-validator [flags]\n"})}),"\n",(0,a.jsx)(e.h2,{id:"options",children:"Options"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:'  -a, --account-number uint          The account number of the signing account (offline mode only)\n      --aux                          Generate aux signer data instead of sending a tx\n  -b, --broadcast-mode string        Transaction broadcasting mode (sync|async|block) (default "sync")\n      --commission-rate string       The new commission rate percentage\n      --details string               The validator\'s (optional) details (default "[do-not-modify]")\n      --dry-run                      ignore the --gas flag and perform a simulation of a transaction, but don\'t broadcast it (when enabled, the local Keybase is not accessible)\n      --fee-granter string           Fee granter grants fees for the transaction\n      --fee-payer string             Fee payer pays fees for the transaction instead of deducting from the signer\n      --fees string                  Fees to pay along with transaction; eg: 10uatom\n      --from string                  Name or address of private key with which to sign\n      --gas string                   gas limit to set per-transaction; set to "auto" to calculate sufficient gas automatically. Note: "auto" option doesn\'t always report accurate results. Set a valid coin value to adjust the result. Can be used instead of "fees". (default 200000)\n      --gas-adjustment float         adjustment factor to be multiplied against the estimate returned by the tx simulation; if the gas limit is set manually this flag is ignored  (default 1)\n      --gas-prices string            Gas prices in decimal format to determine the transaction fee (e.g. 0.1uatom)\n      --generate-only                Build an unsigned transaction and write it to STDOUT (when enabled, the local Keybase only accessed when providing a key name)\n  -h, --help                         help for edit-validator\n      --identity string              The (optional) identity signature (ex. UPort or Keybase) (default "[do-not-modify]")\n      --keyring-backend string       Select keyring\'s backend (os|file|kwallet|pass|test|memory) (default "os")\n      --keyring-dir string           The client Keyring directory; if omitted, the default \'home\' directory will be used\n      --ledger                       Use a connected Ledger device\n      --min-self-delegation string   The minimum self delegation required on the validator\n      --new-moniker string           The validator\'s name (default "[do-not-modify]")\n      --node string                  <host>:<port> to tendermint rpc interface for this chain (default "tcp://localhost:26657")\n      --note string                  Note to add a description to the transaction (previously --memo)\n      --offline                      Offline mode (does not allow any online functionality)\n  -o, --output string                Output format (text|json) (default "json")\n      --security-contact string      The validator\'s (optional) security contact email (default "[do-not-modify]")\n  -s, --sequence uint                The sequence number of the signing account (offline mode only)\n      --sign-mode string             Choose sign mode (direct|amino-json|direct-aux), this is an advanced feature\n      --timeout-height uint          Set a block timeout height to prevent the tx from being committed past a certain height\n      --tip string                   Tip is the amount that is going to be transferred to the fee payer on the target chain. This flag is only valid when used with --aux, and is ignored if the target chain didn\'t enable the TipDecorator\n      --website string               The validator\'s (optional) website (default "[do-not-modify]")\n  -y, --yes                          Skip tx broadcasting prompt confirmation\n'})}),"\n",(0,a.jsx)(e.h2,{id:"options-inherited-from-parent-commands",children:"Options Inherited from Parent Commands"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:'      --chain-id string     The network chain ID\n      --home string         directory for config and data (default "/home/<yourSystemUsername>/.babylond")\n      --log_format string   The logging format (json|plain) (default "plain")\n      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")\n      --trace               print out full stack trace on errors\n'})})]})}function g(t={}){const{wrapper:e}={...(0,i.R)(),...t.components};return e?(0,a.jsx)(e,{...t,children:(0,a.jsx)(c,{...t})}):c(t)}},8453:(t,e,n)=>{n.d(e,{R:()=>d,x:()=>s});var a=n(6540);const i={},o=a.createContext(i);function d(t){const e=a.useContext(o);return a.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function s(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(i):t.components||i:d(t.components),a.createElement(o.Provider,{value:e},t.children)}}}]);