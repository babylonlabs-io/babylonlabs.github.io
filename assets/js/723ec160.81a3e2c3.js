"use strict";(self.webpackChunkdocument_sample=self.webpackChunkdocument_sample||[]).push([[7250],{4096:(e,n,c)=>{c.r(n),c.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>t});var a=c(4848),r=c(8453);const i={id:"Babylond_query_ibc_channel_unreceived-acks",sidebar_label:"babylond query ibc channel unreceived-acks",hide_table_of_contents:!0},l="babylond query ibc channel unreceived-acks",o={id:"cli/babylond/BabylondQuery/Babylond_query_ibc/Babylond_query_ibc_channel/Babylond_query_ibc_channel_unreceived-acks",title:"babylond query ibc channel unreceived-acks",description:"Querying all the unreceived acks associated with the given channel.",source:"@site/docs/cli/babylond/BabylondQuery/Babylond_query_ibc/Babylond_query_ibc_channel/Babylond_query_ibc_channel_unreceived-acks.md",sourceDirName:"cli/babylond/BabylondQuery/Babylond_query_ibc/Babylond_query_ibc_channel",slug:"/cli/babylond/BabylondQuery/Babylond_query_ibc/Babylond_query_ibc_channel/Babylond_query_ibc_channel_unreceived-acks",permalink:"/docs/cli/babylond/BabylondQuery/Babylond_query_ibc/Babylond_query_ibc_channel/Babylond_query_ibc_channel_unreceived-acks",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/cli/babylond/BabylondQuery/Babylond_query_ibc/Babylond_query_ibc_channel/Babylond_query_ibc_channel_unreceived-acks.md",tags:[],version:"current",frontMatter:{id:"Babylond_query_ibc_channel_unreceived-acks",sidebar_label:"babylond query ibc channel unreceived-acks",hide_table_of_contents:!0},sidebar:"docs",previous:{title:"babylond query ibc channel packet-receipt",permalink:"/docs/cli/babylond/BabylondQuery/Babylond_query_ibc/Babylond_query_ibc_channel/Babylond_query_ibc_channel_packet-receipt"},next:{title:"babylond query ibc channel unreceived-packets",permalink:"/docs/cli/babylond/BabylondQuery/Babylond_query_ibc/Babylond_query_ibc_channel/Babylond_query_ibc_channel_unreceived-packets"}},d={},t=[{value:"query ibc channel unreceived-acks command",id:"query-ibc-channel-unreceived-acks-command",level:2},{value:"Example Command",id:"example-command",level:3},{value:"Options",id:"options",level:2},{value:"Options Inherited from Parent Commands",id:"options-inherited-from-parent-commands",level:2}];function s(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"babylond-query-ibc-channel-unreceived-acks",children:"babylond query ibc channel unreceived-acks"}),"\n",(0,a.jsx)(n.p,{children:"Querying all the unreceived acks associated with the given channel."}),"\n",(0,a.jsx)(n.h2,{id:"query-ibc-channel-unreceived-acks-command",children:"query ibc channel unreceived-acks command"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"babylond query ibc channel unreceived-acks [port-id] [channel-id] [flags]\n"})}),"\n",(0,a.jsx)(n.h3,{id:"example-command",children:"Example Command"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"$ babylond query ibc channel unreceived-acks [port-id] [channel-id] --sequences=1,2,3\n"})}),"\n",(0,a.jsx)(n.h2,{id:"options",children:"Options"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'      --height int             Use a specific height to query state at (this can error if the node is pruning state)\n  -h, --help                   help for unreceived-acks\n      --node string            <host>:<port> to Tendermint RPC interface for this chain (default "tcp://localhost:26657")\n  -o, --output string          Output format (text|json) (default "text")\n      --sequences int64Slice   comma separated list of packet sequence numbers (default [])\n'})}),"\n",(0,a.jsx)(n.h2,{id:"options-inherited-from-parent-commands",children:"Options Inherited from Parent Commands"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'      --chain-id string     The network chain ID\n      --home string         directory for config and data (default "/home/<yourSystemUsername>/.babylond")\n      --log_format string   The logging format (json|plain) (default "plain")\n      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")\n      --trace               print out full stack trace on errors\n'})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(s,{...e})}):s(e)}},8453:(e,n,c)=>{c.d(n,{R:()=>l,x:()=>o});var a=c(6540);const r={},i=a.createContext(r);function l(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);