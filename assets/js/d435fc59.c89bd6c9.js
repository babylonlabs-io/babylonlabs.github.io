"use strict";(self.webpackChunkdocument_sample=self.webpackChunkdocument_sample||[]).push([[8984],{9927:(n,i,e)=>{e.r(i),e.d(i,{assets:()=>l,contentTitle:()=>t,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>d});var o=e(4848),s=e(8453);const a={id:"babylond_query_slashing_signing-infos",sidebar_label:"babylond query slashing signing-infos",hide_table_of_contents:!0},t="babylond query slashing signing-infos",r={id:"cli/babylond/BabylondQuery/Babylond_query_slashing/babylond_query_slashing_signing-infos",title:"babylond query slashing signing-infos",description:"Querying the signing information of all validators.",source:"@site/docs/cli/babylond/BabylondQuery/Babylond_query_slashing/Babylond_query_slashing_signing-infos.md",sourceDirName:"cli/babylond/BabylondQuery/Babylond_query_slashing",slug:"/cli/babylond/BabylondQuery/Babylond_query_slashing/babylond_query_slashing_signing-infos",permalink:"/docs/cli/babylond/BabylondQuery/Babylond_query_slashing/babylond_query_slashing_signing-infos",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/cli/babylond/BabylondQuery/Babylond_query_slashing/Babylond_query_slashing_signing-infos.md",tags:[],version:"current",frontMatter:{id:"babylond_query_slashing_signing-infos",sidebar_label:"babylond query slashing signing-infos",hide_table_of_contents:!0},sidebar:"docs",previous:{title:"babylond query slashing signing-info",permalink:"/docs/cli/babylond/BabylondQuery/Babylond_query_slashing/babylond_query_slashing_signing-info"},next:{title:"babylond query staking",permalink:"/docs/cli/babylond/BabylondQuery/babylond_query_staking"}},l={},d=[{value:"query slashing params signing-infos command",id:"query-slashing-params-signing-infos-command",level:2},{value:"Example Command",id:"example-command",level:3},{value:"Options",id:"options",level:2},{value:"Options Inherited from Parent Commands",id:"options-inherited-from-parent-commands",level:2}];function g(n){const i={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(i.h1,{id:"babylond-query-slashing-signing-infos",children:"babylond query slashing signing-infos"}),"\n",(0,o.jsx)(i.p,{children:"Querying the signing information of all validators."}),"\n",(0,o.jsx)(i.h2,{id:"query-slashing-params-signing-infos-command",children:"query slashing params signing-infos command"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{children:"babylond query slashing signing-infos [flags]\n"})}),"\n",(0,o.jsx)(i.h3,{id:"example-command",children:"Example Command"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{children:"$ babylond query slashing signing-infos\n"})}),"\n",(0,o.jsx)(i.h2,{id:"options",children:"Options"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{children:'      --count-total       count total number of records in signing infos to query for\n      --height int        Use a specific height to query state at (this can error if the node is pruning state)\n  -h, --help              help for signing-infos\n      --limit uint        pagination limit of signing infos to query for (default 100)\n      --node string       <host>:<port> to Tendermint RPC interface for this chain (default "tcp://localhost:26657")\n      --offset uint       pagination offset of signing infos to query for\n  -o, --output string     Output format (text|json) (default "text")\n      --page uint         pagination page of signing infos to query for. This sets offset to a multiple of limit (default 1)\n      --page-key string   pagination page-key of signing infos to query for\n      --reverse           results are sorted in descending order\n'})}),"\n",(0,o.jsx)(i.h2,{id:"options-inherited-from-parent-commands",children:"Options Inherited from Parent Commands"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{children:'      --chain-id string     The network chain ID\n      --home string         directory for config and data (default "/home/<yourSystemUsername>/.babylond")\n      --log_format string   The logging format (json|plain) (default "plain")\n      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")\n      --trace               print out full stack trace on errors\n'})})]})}function u(n={}){const{wrapper:i}={...(0,s.R)(),...n.components};return i?(0,o.jsx)(i,{...n,children:(0,o.jsx)(g,{...n})}):g(n)}},8453:(n,i,e)=>{e.d(i,{R:()=>t,x:()=>r});var o=e(6540);const s={},a=o.createContext(s);function t(n){const i=o.useContext(a);return o.useMemo((function(){return"function"==typeof n?n(i):{...i,...n}}),[i,n])}function r(n){let i;return i=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:t(n.components),o.createElement(a.Provider,{value:i},n.children)}}}]);