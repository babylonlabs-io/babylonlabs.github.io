"use strict";(self.webpackChunkdocument_sample=self.webpackChunkdocument_sample||[]).push([[8895],{6071:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>r,toc:()=>l});var t=i(4848),o=i(8453);const a={id:"architecture",sidebar_label:"Architecture",hide_table_of_contents:!0},s="Babylon Architecture",r={id:"introduction/architecture",title:"Babylon Architecture",description:"The Babylon system is composed of a Babylon node",source:"@site/docs/introduction/architecture.md",sourceDirName:"introduction",slug:"/introduction/architecture",permalink:"/docs/introduction/architecture",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/introduction/architecture.md",tags:[],version:"current",frontMatter:{id:"architecture",sidebar_label:"Architecture",hide_table_of_contents:!0},sidebar:"docs",previous:{title:"Bitcoin Staking",permalink:"/docs/introduction/btc-staking"},next:{title:"User Guides",permalink:"/docs/user-guides/overview"}},c={},l=[{value:"Babylon Node Modules",id:"babylon-node-modules",level:2},{value:"Epoching",id:"epoching",level:3},{value:"BTC Light Client",id:"btc-light-client",level:3},{value:"BTC Checkpoint",id:"btc-checkpoint",level:3},{value:"Checkpointing",id:"checkpointing",level:3},{value:"ZoneConcierge",id:"zoneconcierge",level:3},{value:"BTC Staking",id:"btc-staking",level:3},{value:"Finality",id:"finality",level:3},{value:"Incentive",id:"incentive",level:3},{value:"Vigilantes",id:"vigilantes",level:2},{value:"Vigilante Submitter",id:"vigilante-submitter",level:3},{value:"Vigilante Reporter",id:"vigilante-reporter",level:3},{value:"Monitors",id:"monitors",level:2},{value:"Checkpointing Monitor",id:"checkpointing-monitor",level:3},{value:"BTC Staking Monitor",id:"btc-staking-monitor",level:3},{value:"BTC Staking Programs",id:"btc-staking-programs",level:2},{value:"BTC Staker",id:"btc-staker",level:3},{value:"Finality Provider",id:"finality-provider",level:3},{value:"Covenant Emulator",id:"covenant-emulator",level:3},{value:"Consumer Zones",id:"consumer-zones",level:2},{value:"IBC Relayer",id:"ibc-relayer",level:3},{value:"Babylon Contract",id:"babylon-contract",level:3}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"babylon-architecture",children:"Babylon Architecture"}),"\n",(0,t.jsxs)(n.p,{children:["The Babylon system is composed of a Babylon node\nbuilt using the Cosmos SDK as well as peripheral programs\nthat facilitate BTC staking, finality round participation, and\ncommunication with Bitcoin and other Consumer Zones.\n",(0,t.jsx)(n.img,{alt:"Babylon Architecture",src:i(5534).A+"",width:"3494",height:"2897"})]}),"\n",(0,t.jsx)(n.h2,{id:"babylon-node-modules",children:"Babylon Node Modules"}),"\n",(0,t.jsx)(n.h3,{id:"epoching",children:(0,t.jsx)(n.a,{href:"../developer-guides/modules/epoching",children:"Epoching"})}),"\n",(0,t.jsx)(n.p,{children:"The Babylon blockchain is divided into epochs\nthat consist of a parameterized number of blocks.\nWithin each epoch, the validator set does not change.\nThis way, Babylon needs a checkpoint per epoch rather than per block,\nwhich reduces the checkpointing costs.\nThe epoching module achieves this by delaying the execution\nof transactions that affect the validator set to the last block\nof each epoch."}),"\n",(0,t.jsx)(n.h3,{id:"btc-light-client",children:(0,t.jsx)(n.a,{href:"../developer-guides/modules/btclightclient",children:"BTC Light Client"})}),"\n",(0,t.jsx)(n.p,{children:"The BTC Light Client module receives Bitcoin headers\nreported by the Vigilante Reporter and\nmaintains a BTC header chain based on the PoW rules of Bitcoin.\nIt exposes information about the canonical Bitcoin chain,\nthe depth of headers, and\nwhether the inclusion evidence for a Bitcoin transaction is valid."}),"\n",(0,t.jsx)(n.h3,{id:"btc-checkpoint",children:(0,t.jsx)(n.a,{href:"../developer-guides/modules/btccheckpoint",children:"BTC Checkpoint"})}),"\n",(0,t.jsx)(n.p,{children:"The BTC Checkpoint module verifies Babylon\u2019s BTC checkpoints\nreported by the Vigilante Reporter, and\nprovides the confirmation status of these checkpoints to the Checkpointing\nmodule based on their depth according to the BTC Light Client module."}),"\n",(0,t.jsx)(n.h3,{id:"checkpointing",children:(0,t.jsx)(n.a,{href:"../developer-guides/modules/checkpointing",children:"Checkpointing"})}),"\n",(0,t.jsxs)(n.p,{children:["The checkpointing module is responsible for creating Babylon checkpoints\nto be submitted to Bitcoin and maintaining their confirmation status.\nIt collects the validator's\n",(0,t.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/BLS_digital_signature",children:"BLS signatures"}),"\nfor each block to be checkpointed and aggregates them\ninto a BLS multisignature to include in the Bitcoin checkpoint.\nThe confirmation status of each checkpoint is determined by\nBitcoin checkpoint inclusion information retrieved from the\nBTC checkpoint module."]}),"\n",(0,t.jsx)(n.h3,{id:"zoneconcierge",children:(0,t.jsx)(n.a,{href:"../developer-guides/modules/zoneconcierge",children:"ZoneConcierge"})}),"\n",(0,t.jsxs)(n.p,{children:["The Zone Concierge module\nextracts verified Consumer Zone headers from\nconnected ",(0,t.jsx)(n.a,{href:"https://github.com/cosmos/ibc-go",children:"IBC light clients"})," and\nmaintains their Bitcoin confirmation status based on the\nBitcoin confirmation status of the\nBabylon transactions that carry them.\nIt communicates the Bitcoin confirmation status to the Consumer Zone\nusing verifiable proofs through an\n",(0,t.jsx)(n.a,{href:"https://github.com/cosmos/ibc-go",children:"IBC"})," connection."]}),"\n",(0,t.jsx)(n.h3,{id:"btc-staking",children:"BTC Staking"}),"\n",(0,t.jsx)(n.p,{children:"The BTC Staking module\nis the bookkeeper for the BTC staking protocol.\nIt is responsible for verifying and activating\nBTC staking requests and\nmaintaining the active finality provider set.\nIt communicates with the BTC Light Client module\nto extract the confirmation status of staking requests and\nreceives notifications about on-demand unlocked stake from the\nBTC Staking Monitor."}),"\n",(0,t.jsx)(n.h3,{id:"finality",children:"Finality"}),"\n",(0,t.jsxs)(n.p,{children:["The Finality module is responsible for finalizing blocks\nproduced by the CometBFT consensus.\nIt receives and verifies finality round votes\nfrom finality providers and\na block is considered finalized if sufficient\nvoting power is cast on it.\nThe voting power of each finality provider is based on\nits Bitcoin stake retrieved from the BTC Staking module.\nFinality votes are performed using\n",(0,t.jsx)(n.a,{href:"https://docs.babylonlabs.io/assets/files/btc_staking_litepaper-32bfea0c243773f0bfac63e148387aef.pdf",children:"Extractable-One-Time-Signatures (EOTS)"}),"\nand verified using\nthe finality providers' committed public randomness."]}),"\n",(0,t.jsx)(n.h3,{id:"incentive",children:"Incentive"}),"\n",(0,t.jsx)(n.p,{children:"The incentive module consumes a percentage\nof the rewards intended for Babylon stakers and\ndistributes it as rewards to Bitcoin stakers and\nvigilantes."}),"\n",(0,t.jsx)(n.h2,{id:"vigilantes",children:"Vigilantes"}),"\n",(0,t.jsx)(n.p,{children:"The vigilante suite of programs acts as a\nrelayer of data between Babylon and Bitcoin.\nThe secure operation of Babylon requires\nthat at least one honest\noperator of each of the programs exist.\nOtherwise,\nan alarm will be raised by the monitor program."}),"\n",(0,t.jsx)(n.h3,{id:"vigilante-submitter",children:(0,t.jsx)(n.a,{href:"../developer-guides/modules/submitter",children:"Vigilante Submitter"})}),"\n",(0,t.jsxs)(n.p,{children:["A standalone program that submits\nBabylon checkpoints to Bitcoin as\nBitcoin transactions embedding data\nutilising the ",(0,t.jsx)(n.code,{children:"OP_RETURN"})," Bitcoin script code."]}),"\n",(0,t.jsx)(n.h3,{id:"vigilante-reporter",children:(0,t.jsx)(n.a,{href:"../developer-guides/modules/reporter",children:"Vigilante Reporter"})}),"\n",(0,t.jsx)(n.p,{children:"A standalone program that scans\nthe Bitcoin ledger for Bitcoin headers and Babylon checkpoints,\nand reports them back to Babylon using Babylon transactions."}),"\n",(0,t.jsx)(n.h2,{id:"monitors",children:"Monitors"}),"\n",(0,t.jsx)(n.p,{children:"The monitor programs suite is responsible for\nmonitoring the consistency between the state of Babylon and\nBitcoin."}),"\n",(0,t.jsx)(n.h3,{id:"checkpointing-monitor",children:(0,t.jsx)(n.a,{href:"../developer-guides/modules/monitor",children:"Checkpointing Monitor"})}),"\n",(0,t.jsx)(n.p,{children:"A standalone program that monitors:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The consistency between the Bitcoin canonical chain and\nthe Bitcoin header chain maintained by\nthe BTC Light client module."}),"\n",(0,t.jsx)(n.li,{children:"The timely inclusion of the Bitcoin checkpoints\ninformation in the Babylon ledger."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"btc-staking-monitor",children:(0,t.jsx)(n.a,{href:"https://github.com/babylonlabs-io/vigilante",children:"BTC Staking Monitor"})}),"\n",(0,t.jsx)(n.p,{children:"A standalone program that monitors:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The execution of BTC Staking on-demand unbonding transactions\non the Bitcoin ledger to inform Babylon about them."}),"\n",(0,t.jsx)(n.li,{children:"The execution of BTC Staking slashing transactions in the case\nof a finality provider double voting.\nIn the case of non-execution the monitor extracts the finality provider's\nprivate key and executes the slashing."}),"\n",(0,t.jsx)(n.li,{children:"The execution of a selective slashing attack launched\nby a finality provider. In this case,\nthe monitor extracts the finality provider's private key\nand slashes them."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"btc-staking-programs",children:"BTC Staking Programs"}),"\n",(0,t.jsx)(n.p,{children:"The BTC Staking programs suite\ninvolves components that enable the function\nBitcoin Stakers and Finality Providers\nwhile also ensuring their adherence to the protocol."}),"\n",(0,t.jsx)(n.h3,{id:"btc-staker",children:"BTC Staker"}),"\n",(0,t.jsx)(n.p,{children:"Bitcoin holders can stake their Bitcoin\nby creating a set of Bitcoin transactions,\nincluding them to the Bitcoin ledger, and\nthen informing Babylon about their staking.\nLater, they can also on-demand unlock or\nwithdraw their funds when their stake expires.\nThe following set of standalone programs\nhas been developed to enable these functionalities:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://github.com/babylonlabs-io/btc-staker",children:"BTC Staker Daemon"}),":\nDaemon program connecting to a Bitcoin wallet and Babylon."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://github.com/babylonlabs-io/btc-staking-dashboard",children:"BTC Staker Dashboard"}),":\nWeb application connecting to a Bitcoin wallet extension and the Babylon API.\nShould only be used for testing purposes."]}),"\n",(0,t.jsx)(n.li,{children:"Wallet Integrations (TBD)"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"finality-provider",children:(0,t.jsx)(n.a,{href:"https://github.com/babylonlabs-io/finality-provider",children:"Finality Provider"})}),"\n",(0,t.jsxs)(n.p,{children:["A standalone program that allows for the registration and\nmaintenance of a finality provider.\nIt monitors for a finality provider's inclusion in the active set, commits\n",(0,t.jsx)(n.a,{href:"https://docs.babylonlabs.io/assets/files/btc_staking_litepaper-32bfea0c243773f0bfac63e148387aef.pdf",children:"Extractable One Time Signature (EOTS)"}),"\npublic randomness, and\nsubmits finality votes for blocks.\nFinality votes are created through a connection to a standalone\n",(0,t.jsx)(n.a,{href:"https://github.com/babylonlabs-io/finality-provider",children:"EOTS manager daemon"}),"\nresponsible for securely maintaining the\nfinality provider's private keys."]}),"\n",(0,t.jsx)(n.h3,{id:"covenant-emulator",children:(0,t.jsx)(n.a,{href:"https://github.com/babylonlabs-io/covenant-emulator",children:"Covenant Emulator"})}),"\n",(0,t.jsxs)(n.p,{children:["A standalone program utilised by the covenant emulation committee members.\nIt emulates ",(0,t.jsx)(n.a,{href:"https://covenants.info",children:"covenant"})," functionality by monitoring\nfor pending staking requests,\nverifying their contents, and\nsubmitting necessary signatures."]}),"\n",(0,t.jsx)(n.h2,{id:"consumer-zones",children:"Consumer Zones"}),"\n",(0,t.jsx)(n.h3,{id:"ibc-relayer",children:"IBC Relayer"}),"\n",(0,t.jsxs)(n.p,{children:["The IBC Relayer maintains the\n",(0,t.jsx)(n.a,{href:"https://cosmos.network/ibc/",children:"IBC protocol"})," connection\nbetween Babylon and other Consumer Zones (CZs).\nIt is responsible for updating the CZ's light client\ninside the Babylon ledger to enable checkpointing and\npropagating checkpoint information to the Babylon smart contract\ndeployed within the CZ."]}),"\n",(0,t.jsx)(n.p,{children:"There are different IBC relayer implementations that can achieve\nthis function. Most notably:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://github.com/cosmos/relayer",children:"Cosmos Relayer"}),":\nA fully functional relayer written in Go."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://github.com/babylonlabs-io/babylon-relayer/",children:"Babylon Relayer"}),":\nA wrapper of the Cosmos Relayer that can maintain a one-way IBC connection.\nIt is recommended to be used when the Consumer Zone does not deploy the\nBabylon smart contract."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://github.com/informalsystems/hermes",children:"Hermes Relayer"}),":\nA fully functional relayer written in Rust."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"babylon-contract",children:(0,t.jsx)(n.a,{href:"https://github.com/babylonlabs-io/babylon-contract",children:"Babylon Contract"})}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.a,{href:"https://cosmwasm.com/",children:"CosmWasm"})," smart contract intended for\ndeployment in a Consumer Zone.\nIt enables Bitcoin Checkpointing functionality without introducing\ninvasive changes in the codebase of the Consumer Zone.\nBased on the Bitcoin Checkpointing functionality,\nthe Consumer Zone can make decisions based on the inclusion\nof its checkpoints in the Bitcoin ledger\n(e.g. execute BTC-assisted unbonding requests)."]})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},5534:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/arch-22e59a792ec45217a5f121dfe7d3f701.png"},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>r});var t=i(6540);const o={},a=t.createContext(o);function s(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);