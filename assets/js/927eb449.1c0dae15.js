"use strict";(self.webpackChunkdocument_sample=self.webpackChunkdocument_sample||[]).push([[3069],{441:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>l});var a=t(4848),o=t(8453);const s={id:"become-validator",sidebar_label:"Become a Validator",hide_table_of_contents:!0},i="Become a Validator",r={id:"user-guides/btc-staking-testnet/become-validator",title:"Become a Validator",description:"Learn how to become a Validator for Babylon.",source:"@site/docs/user-guides/btc-staking-testnet/become-validator.md",sourceDirName:"user-guides/btc-staking-testnet",slug:"/user-guides/btc-staking-testnet/become-validator",permalink:"/docs/user-guides/btc-staking-testnet/become-validator",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/user-guides/btc-staking-testnet/become-validator.md",tags:[],version:"current",frontMatter:{id:"become-validator",sidebar_label:"Become a Validator",hide_table_of_contents:!0},sidebar:"docs",previous:{title:"Getting Testnet Tokens",permalink:"/docs/user-guides/btc-staking-testnet/getting-funds"},next:{title:"Become a Finality Provider",permalink:"/docs/user-guides/btc-staking-testnet/finality-providers/overview"}},d={},l=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"1. Create a Keyring and Get Funds",id:"1-create-a-keyring-and-get-funds",level:2},{value:"2. Create a BLS key",id:"2-create-a-bls-key",level:2},{value:"3. Modify the Configuration",id:"3-modify-the-configuration",level:2},{value:"4. Create the Validator",id:"4-create-the-validator",level:2},{value:"5. Verify your Validator",id:"5-verify-your-validator",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",hr:"hr",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"become-a-validator",children:"Become a Validator"}),"\n",(0,a.jsx)(n.p,{children:"Learn how to become a Validator for Babylon."}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,a.jsxs)(n.p,{children:["Having a full node setup and synced by following this ",(0,a.jsx)(n.a,{href:"/docs/user-guides/btc-staking-testnet/setup-node",children:"guide"})]}),"\n",(0,a.jsx)(n.h2,{id:"1-create-a-keyring-and-get-funds",children:"1. Create a Keyring and Get Funds"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.a,{href:"/docs/user-guides/btc-staking-testnet/getting-funds",children:"Getting Testnet Tokens"})," page contains detailed instructions\non how to create a keyring and get funds for it through a faucet."]}),"\n",(0,a.jsx)(n.h2,{id:"2-create-a-bls-key",children:"2. Create a BLS key"}),"\n",(0,a.jsx)(n.p,{children:"Validators are expected to submit a BLS signature at the end of each epoch.\nTo do that, a validator needs to have a BLS key pair to sign information with."}),"\n",(0,a.jsxs)(n.p,{children:["Using the address that you created on the previous step (",(0,a.jsx)(n.code,{children:"$ADDR"})," variable):"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-console",children:"babylond create-bls-key $ADDR\n"})}),"\n",(0,a.jsxs)(n.p,{children:["This command will create a BLS key and add it to the ",(0,a.jsx)(n.code,{children:"~/.babylond/config/priv_validator_key.json"}),".\nThis is the same file that stores the private key that the validator uses to sign blocks.\nPlease ensure that this file is secured properly."]}),"\n",(0,a.jsxs)(n.p,{children:["After creating a BLS key, you need to restart your node to load this key into\nmemory. If you followed the ",(0,a.jsx)(n.a,{href:"/docs/user-guides/btc-staking-testnet/setup-node",children:"setting up a node guide"}),", you\nwould have to"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-console",children:"sudo systemctl stop babylond\nsudo systemctl start babylond\n"})}),"\n",(0,a.jsx)(n.h2,{id:"3-modify-the-configuration",children:"3. Modify the Configuration"}),"\n",(0,a.jsxs)(n.p,{children:["It is strongly recommended to modify the ",(0,a.jsx)(n.code,{children:"timeout_commit"})," value\nunder ",(0,a.jsx)(n.code,{children:"~/.babylond/config/config.toml"}),". This value specifies\nhow long a validator will wait before commiting a block before starting\non a new height. More information can be found ",(0,a.jsx)(n.a,{href:"https://docs.tendermint.com/v0.33/tendermint-core/configuration.html#consensus-timeouts-explained",children:"here"}),".\nGiven that Babylon aims to have a 30 second time between blocks, set this value\nto:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-toml",children:'timeout_commit = "30s"\n'})}),"\n",(0,a.jsx)(n.h2,{id:"4-create-the-validator",children:"4. Create the Validator"}),"\n",(0,a.jsxs)(n.p,{children:["Contrary to a vanilla Cosmos SDK chain, a validator for Babylon is created through\nthe ",(0,a.jsx)(n.code,{children:"babylond tx checkpointing create-validator"})," command.\nThis command expects that a BLS validator key exists under the ",(0,a.jsx)(n.code,{children:"~/.babylond/config/priv_validator_key.json"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"To create the validator (using sample parameters):"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-console",children:'# Note the variables\n# - $CHAIN_ID the chain ID\n# - $VAL_KEY the name of the key (with a test keyring backend) used for the validator\nbabylond tx checkpointing create-validator /path/to/validator.json \\\n    --chain-id="$CHAIN_ID" \\\n    --gas="auto" \\\n    --gas-adjustment="1.5" \\\n    --gas-prices="0.025ubbn" \\\n    --from=$VAL_KEY\n'})}),"\n",(0,a.jsxs)(n.p,{children:["where ",(0,a.jsx)(n.code,{children:"/path/to/validator.json"})," contains"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'# - $AMOUNT the amount to delegate in ubbn, e.g. 1000000ubbn (must be less than the delegator\'s balance, and unit must be included)\n{\n  "pubkey": {"@type":"/cosmos.crypto.ed25519.PubKey","key":"BnbwFpeONLqvWqJb3qaUbL5aoIcW3fSuAp9nT3z5f20="},\n  "amount": "$AMOUNT",\n  "moniker": "my-moniker",\n  "website": "https://myweb.site",\n  "security": "security-contact@gmail.com",\n  "details": "description of your validator",\n  "commission-rate": "0.10",\n  "commission-max-rate": "0.20",\n  "commission-max-change-rate": "0.01",\n  "min-self-delegation": "1"\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["and ",(0,a.jsx)(n.code,{children:"pubkey"})," can be obtained through the following command"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-console",children:"babylond tendermint show-validator\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:["Note: In order to become an active validator, you need to have more ",(0,a.jsx)(n.code,{children:"ubbn"}),"\ntokens bonded than the last validator ordered by the tokens bonded (or the\nvalidator set to not be full) as well as have at least ",(0,a.jsx)(n.code,{children:"1000000ubbn"})," bonded."]})}),"\n",(0,a.jsx)(n.h2,{id:"5-verify-your-validator",children:"5. Verify your Validator"}),"\n",(0,a.jsx)(n.p,{children:"On the Babylon system,\none can become a validator only after an epoch ends.\nFor the testnet, an epoch lasts for around 1 hour."}),"\n",(0,a.jsx)(n.p,{children:"To verify that you have become a validator, first find your validator address:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"babylond keys show $KEYNAME -a --bech val\n"})}),"\n",(0,a.jsxs)(n.p,{children:["where ",(0,a.jsx)(n.code,{children:"$KEYNAME"})," is the name of the key that you used for the self-delegation (e.g. ",(0,a.jsx)(n.code,{children:"my-key"})," on our example).\nThis will return an address which you can use as the ",(0,a.jsx)(n.code,{children:"$ADDR"})," variable to perform the following query:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-console",children:"babylond query staking validator $ADDR\n"})}),"\n",(0,a.jsxs)(n.p,{children:["If all goes well, you should see a response indicating the parameters that you specified\non the ",(0,a.jsx)(n.code,{children:"create-validator"})," transaction."]}),"\n",(0,a.jsxs)(n.p,{children:["After the epoch ends and if you have enough stake to be an active validator,\nperforming this query will return you a status ",(0,a.jsx)(n.code,{children:"BOND_STATUS_BONDED"}),".\nCongrats! You are now a validator on the Babylon system."]}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:["If you want to delegate, redelegate, unbond or cancel-unbond, please use the wrapped messages in the\ncheckpointing and epoching modules as the messages in staking module are disabled.\nRead more ",(0,a.jsx)(n.a,{href:"/docs/developer-guides/modules/epoching#delaying-wrapped-messages-to-the-end-of-epochs",children:"here"})]})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>r});var a=t(6540);const o={},s=a.createContext(o);function i(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);