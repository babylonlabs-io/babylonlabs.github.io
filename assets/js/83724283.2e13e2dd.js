"use strict";(self.webpackChunkdocument_sample=self.webpackChunkdocument_sample||[]).push([[758],{2808:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>h});var a=t(4848),o=t(8453);const i={id:"czintegrate",sidebar_label:"BTC timestamping integration",hide_table_of_contents:!0},s="BTC timestamping integration",r={id:"user-guides/btc-staking-testnet/czintegrate",title:"BTC timestamping integration",description:"Learn how to integrate a Cosmos Zone with the Babylon BTC timestamping protocol.",source:"@site/docs/user-guides/btc-staking-testnet/integrate.md",sourceDirName:"user-guides/btc-staking-testnet",slug:"/user-guides/btc-staking-testnet/czintegrate",permalink:"/docs/user-guides/btc-staking-testnet/czintegrate",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/user-guides/btc-staking-testnet/integrate.md",tags:[],version:"current",frontMatter:{id:"czintegrate",sidebar_label:"BTC timestamping integration",hide_table_of_contents:!0},sidebar:"docs",previous:{title:"Become a Vigilante",permalink:"/docs/user-guides/btc-staking-testnet/become-vigilante"},next:{title:"Developer Guides",permalink:"/docs/developer-guides/overview"}},l={},h=[{value:"Babylon IBC relayer",id:"babylon-ibc-relayer",level:2},{value:"Running a Babylon IBC relayer",id:"running-a-babylon-ibc-relayer",level:2},{value:"Install the Babylon Relayer",id:"install-the-babylon-relayer",level:3},{value:"Configure the Babylon Relayer",id:"configure-the-babylon-relayer",level:3},{value:"Create a key for the Babylon relayer",id:"create-a-key-for-the-babylon-relayer",level:3},{value:"Obtain Babylon Tokens",id:"obtain-babylon-tokens",level:3},{value:"Start the Babylon Relayer",id:"start-the-babylon-relayer",level:3},{value:"Check if the Integration is Successful",id:"check-if-the-integration-is-successful",level:3},{value:"Future Integration Phases",id:"future-integration-phases",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"btc-timestamping-integration",children:"BTC timestamping integration"}),"\n",(0,a.jsx)(n.p,{children:"Learn how to integrate a Cosmos Zone with the Babylon BTC timestamping protocol."}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.p,{children:"At the moment, Babylon provides a canonical chain oracle for each integrated Cosmos zone,\nand allows anyone to query the canonical chains of integrated Cosmos zones and\nquery the fork headers created by a validator set with dishonest majority.\nIn the future, integrating Babylon will allows Cosmos zones to raise alarms upon\ndishonest majority attacks, and reduce the unbonding time."}),"\n",(0,a.jsxs)(n.p,{children:["In order to integrate a Cosmos zone to Babylon,\nthe first option would be sending an email to ",(0,a.jsx)(n.a,{href:"mailto:admin@babylonlabs.io",children:"the Babylon team"}),",\nthen the Babylon team will deploy a relayer for your blockchain.\nAlternatively, anyone can integrate any Cosmos zone to Babylon\nby running an IBC relayer specialized for Babylon.\nThe special IBC relayer uses a subset of the IBC protocol,\nand there is no need to modify the integrated Cosmos zone's code,\nor have tokens in the integrated Cosmos zone."]}),"\n",(0,a.jsx)(n.h2,{id:"babylon-ibc-relayer",children:"Babylon IBC relayer"}),"\n",(0,a.jsxs)(n.p,{children:["In order to provide a canonical chain oracle for Cosmos zones,\nBabylon only needs to use a subset of IBC protocols.\nSpecifically, Babylon needs to maintain an IBC light client for the integrated Cosmos zone,\nbut not the other way.\nHowever, existing relayers, including the ",(0,a.jsx)(n.a,{href:"https://github.com/cosmos/relayer",children:"Go relayer"}),"\nand the Rust Hermes relayer, are designed for the full IBC protocol stack with an emphasis on\nIBC packets, thus only provide functionalities for updating both IBC clients in two Cosmos zones and\nrelaying IBC packets among them."]}),"\n",(0,a.jsxs)(n.p,{children:["To this end, the Babylon team has developed a special IBC relayer\nbased on ",(0,a.jsx)(n.a,{href:"https://github.com/cosmos/relayer",children:"the official IBC relayer in Golang"}),".\nThe special IBC relayer allows one to maintain an IBC light client of a Cosmos zone in Babylon,\nand periodically forward headers of the Cosmos zone to Babylon.\nIt gives us the following advantages:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Integrating a Cosmos zone to Babylon only needs Babylon accounts and tokens.\nAccounts and tokens of integrated Cosmos zones are not needed."}),"\n",(0,a.jsx)(n.li,{children:"Integrating a Cosmos zone to Babylon incurs zero computational\nor storage overhead on integrated Cosmos zones."}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"running-a-babylon-ibc-relayer",children:"Running a Babylon IBC relayer"}),"\n",(0,a.jsx)(n.p,{children:"Running a Babylon IBC relayer consists of the following steps:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Install the Babylon Relayer"}),"\n",(0,a.jsx)(n.li,{children:"Configure the Babylon Relayer"}),"\n",(0,a.jsx)(n.li,{children:"Create a keyring for the Babylon relayer"}),"\n",(0,a.jsx)(n.li,{children:"Obtain Babylon tokens"}),"\n",(0,a.jsx)(n.li,{children:"Start the Babylon Relayer"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"install-the-babylon-relayer",children:"Install the Babylon Relayer"}),"\n",(0,a.jsxs)(n.p,{children:["The Babylon relayer is located at ",(0,a.jsx)(n.a,{href:"https://github.com/babylonlabs-io/babylon-relayer",children:"GitHub"}),".\nPlease follow the documentation for installing it.\nIn summary, after cloning the repository,\nnavigate to the folder in which you cloned it,\ncheckout to the version you want to install (e.g. ",(0,a.jsx)(n.code,{children:"git checkout v0.3.0"}),"),\nand execute,"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"$ make install\n"})}),"\n",(0,a.jsxs)(n.p,{children:["This will install the ",(0,a.jsx)(n.code,{children:"babylon-relayer"})," binary. You can verify that everything worked properly by running,"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"$ babylon-relayer --help\nbabylon-relayer has:\n        1. Configuration management for Chains and Paths\n        2. Key management for managing multiple keys for multiple chains\n        3. Query and transaction functionality for IBC\n        4. Functionality for relaying headers from Cosmos Zones to Babylon periodically\n\n        NOTE: Most of the commands have aliases that make typing them much quicker\n                  (i.e. 'babylon-relayer tx', 'babylon-relayer q', etc...)\n\nUsage:\n  babylon-relayer [command]\n \n...output truncated\n"})}),"\n",(0,a.jsx)(n.h3,{id:"configure-the-babylon-relayer",children:"Configure the Babylon Relayer"}),"\n",(0,a.jsxs)(n.p,{children:["The default Babylon relayer home directory is ",(0,a.jsx)(n.code,{children:"~/.relayer"}),".\nYou can specify a different Babylon relayer home directory through the ",(0,a.jsx)(n.code,{children:"--home"})," CLI flag.\nFor the purposes of this document and for simplicity,\nwe will assume that the home directory is ",(0,a.jsx)(n.code,{children:"~/.relayer"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["The configuration file for the relayer is located under the ",(0,a.jsx)(n.code,{children:"$RELAYER_HOME/config/config.yaml"}),".\nIn our case, ",(0,a.jsx)(n.code,{children:"$RELAYER_HOME"})," is ",(0,a.jsx)(n.code,{children:"~/.relayer"}),".\nAn example config file for integrating Osmosis testnet is as follows:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'global:\n    api-listen-addr: :5183\n    timeout: 20s\n    memo: ""\n    light-cache-size: 10\nchains:\n    # Name for the Babylon chain\n    babylon:\n        type: cosmos\n        value:\n            # REPLACEME: Name of the key in the keyring that will be used to send transactions to Babylon.\n            #            We will create this key on the next step.\n            key: babylon-relayer-key\n            # REPLACEME: The Chain ID of the Babylon network you want to connect to.\n            #            For example, for the current testnet, this is `bbn-test-2`\n            #            Note that this chain ID should be the same one you used for creating the keyring.\n            chain-id: bbn-test-3\n            # REPLACEME: The RPC endpoint of a node that runs on the Babylon network you want to connect to.\n            rpc-addr: https://rpc.testnet3.babylonlabs.io:443\n            account-prefix: bbn\n            # The backend of the keyring you\'re using. Recall that this should always be `test`.\n            keyring-backend: test\n            # Gas prices and gas adjustment.\n            gas-adjustment: 1.5\n            gas-prices: 0.002ubbn\n            min-gas-amount: 0\n            debug: true\n            timeout: 10s\n            output-format: json\n            sign-mode: direct\n            extra-codecs: []\n    # Name for the chain to be integrated\n    osmosis:\n        type: cosmos\n        value:\n            # REPLACEME: The chain ID of the chain you want to integrate with Babylon\n            chain-id: osmo-test-4\n            # REPLACEME: The RPC endpoint of a node that runs on the network of the chain you want to integrate with Babylon.\n            rpc-addr: https://osmosis-testnet-rpc.allthatnode.com:26657/\n            keyring-backend: test\n            timeout: 10s\npaths:\n    # Name of the relayer path\n    osmosis:\n        # Chain IDs that this path will connect\n        # REPLACEME: Use the chain IDs For Babylon and the integrated chain you specified above.\n        src:\n            chain-id: bbn-test-3\n        dst:\n            chain-id: osmo-test-4\n'})}),"\n",(0,a.jsx)(n.h3,{id:"create-a-key-for-the-babylon-relayer",children:"Create a key for the Babylon relayer"}),"\n",(0,a.jsx)(n.p,{children:"After specifying the configuration,\nwe need to create a keyring that will pay the transaction fees for sending\ntransactions to the Babylon chain."}),"\n",(0,a.jsx)(n.p,{children:"We have two options:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Create a keyring from scratch"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"$ babylon-relayer keys add $BABYLON_NAME $BABYLON_KEY_NAME\n"})}),"\n",(0,a.jsxs)(n.ol,{start:"2",children:["\n",(0,a.jsx)(n.li,{children:"Import an already existing keyring. For this you're going to need the mnemonic"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'$ babylon-relayer keys restore $BABYLON_NAME $BABYLON_KEY_NAME "$MNEMONIC"\n'})}),"\n",(0,a.jsx)(n.p,{children:"In the above commands,"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"$BABYLON_NAME"})," is the name assigned to the Babylon chain in the configuration file.\nIn the example configuration above this is ",(0,a.jsx)(n.code,{children:"babylon"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"$BABYLON_KEY_NAME"})," is the name assigned to the key for Babylon in the configuration file.\nIn the example configuration above this is ",(0,a.jsx)(n.code,{children:"babylon-relayer-key"})]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"$MNEMONIC"})," is the mnemonic for the key you want to import."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"To verify that your key has been included, you can execute:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"$ babylon-relayer keys list $BABYLON_NAME\n"})}),"\n",(0,a.jsx)(n.p,{children:"If all worked as expected, you should see the key address in the output."}),"\n",(0,a.jsx)(n.h3,{id:"obtain-babylon-tokens",children:"Obtain Babylon Tokens"}),"\n",(0,a.jsx)(n.p,{children:"Now it's time to obtain the tokens that will be used to pay for Babylon transaction fees\nfor relaying headers.\nThose funds should go to the address of the key you created on the previous step.\nYou can obtain funds through the faucet found in the Babylon Discord."}),"\n",(0,a.jsx)(n.h3,{id:"start-the-babylon-relayer",children:"Start the Babylon Relayer"}),"\n",(0,a.jsx)(n.p,{children:"To start the Babylon relayer,"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"$ babylon-relayer keep-update-clients --interval $INTERVAL\n"})}),"\n",(0,a.jsxs)(n.p,{children:["where ",(0,a.jsx)(n.code,{children:"$INTERVAL"})," is the interval for relaying a header (e.g., ",(0,a.jsx)(n.code,{children:"10m"})," to denote 10 minutes per header)."]}),"\n",(0,a.jsx)(n.h3,{id:"check-if-the-integration-is-successful",children:"Check if the Integration is Successful"}),"\n",(0,a.jsx)(n.p,{children:"After the above steps, the Cosmos zone has been integrated to Babylon.\nYou can do the following things to check the status of the integration:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Check the Babylon node API\n",(0,a.jsx)(n.code,{children:"http://lcd.testnet3.babylonlabs.io/babylon/zoneconcierge/v1/chain_info/<your_chain_id>"}),"\nthat shows the information of the Cosmos zone in the Babylon blockchain's view."]}),"\n",(0,a.jsxs)(n.li,{children:["Check whether ",(0,a.jsx)(n.a,{href:"https://babylonscan.io",children:"BabylonScan"})," shows\nthe information of the Cosmos zone or not.","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"NOTE: one needs to submit a PR to a chain registry in order to be shown on BabylonScan"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"future-integration-phases",children:"Future Integration Phases"}),"\n",(0,a.jsxs)(n.p,{children:["In the future, Babylon will enable further integration phases,\nsuch as raising alarms upon dishonest majority attacks and\nreducing the unbonding time period.\nSuch integrations will need IBC packets,\nthus require using the original IBC relayer\nrather than the above specialized one.\nPlease see ",(0,a.jsx)(n.a,{href:"/docs/developer-guides/modules/zoneconcierge",children:"Zone Concierge"})," for more details."]})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>r});var a=t(6540);const o={},i=a.createContext(o);function s(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);