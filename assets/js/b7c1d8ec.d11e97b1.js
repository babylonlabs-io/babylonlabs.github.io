"use strict";(self.webpackChunkdocument_sample=self.webpackChunkdocument_sample||[]).push([[7274],{4482:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>b,frontMatter:()=>a,metadata:()=>r,toc:()=>s});var i=n(4848),o=n(8453);const a={id:"Babylond_query_ibc_client_states",sidebar_label:"babylond query ibc client states",hide_table_of_contents:!0},l="babylond query ibc client states",r={id:"cli/babylond/BabylondQuery/Babylond_query_ibc/Babylond_query_ibc_client/Babylond_query_ibc_client_states",title:"babylond query ibc client states",description:"Querying all the available light clients.",source:"@site/docs/cli/babylond/BabylondQuery/Babylond_query_ibc/Babylond_query_ibc_client/Babylond_query_ibc_client_states.md",sourceDirName:"cli/babylond/BabylondQuery/Babylond_query_ibc/Babylond_query_ibc_client",slug:"/cli/babylond/BabylondQuery/Babylond_query_ibc/Babylond_query_ibc_client/Babylond_query_ibc_client_states",permalink:"/docs/cli/babylond/BabylondQuery/Babylond_query_ibc/Babylond_query_ibc_client/Babylond_query_ibc_client_states",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/cli/babylond/BabylondQuery/Babylond_query_ibc/Babylond_query_ibc_client/Babylond_query_ibc_client_states.md",tags:[],version:"current",frontMatter:{id:"Babylond_query_ibc_client_states",sidebar_label:"babylond query ibc client states",hide_table_of_contents:!0},sidebar:"docs",previous:{title:"babylond query ibc client state",permalink:"/docs/cli/babylond/BabylondQuery/Babylond_query_ibc/Babylond_query_ibc_client/Babylond_query_ibc_client_state"},next:{title:"babylond query ibc client status",permalink:"/docs/cli/babylond/BabylondQuery/Babylond_query_ibc/Babylond_query_ibc_client/Babylond_query_ibc_client_status"}},c={},s=[{value:"query ibc client states command",id:"query-ibc-client-states-command",level:2},{value:"Example Command",id:"example-command",level:3},{value:"Options",id:"options",level:2},{value:"Options Inherited from Parent Commands",id:"options-inherited-from-parent-commands",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"babylond-query-ibc-client-states",children:"babylond query ibc client states"}),"\n",(0,i.jsx)(t.p,{children:"Querying all the available light clients."}),"\n",(0,i.jsx)(t.h2,{id:"query-ibc-client-states-command",children:"query ibc client states command"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"babylond query ibc client states [flags]\n"})}),"\n",(0,i.jsx)(t.h3,{id:"example-command",children:"Example Command"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"$ babylond query ibc client states\n"})}),"\n",(0,i.jsx)(t.h2,{id:"options",children:"Options"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'      --count-total       count total number of records in client states to query for\n      --height int        Use a specific height to query state at (this can error if the node is pruning state)\n  -h, --help              help for states\n      --limit uint        pagination limit of client states to query for (default 100)\n      --node string       <host>:<port> to Tendermint RPC interface for this chain (default "tcp://localhost:26657")\n      --offset uint       pagination offset of client states to query for\n  -o, --output string     Output format (text|json) (default "text")\n      --page uint         pagination page of client states to query for. This sets offset to a multiple of limit (default 1)\n      --page-key string   pagination page-key of client states to query for\n      --reverse           results are sorted in descending order\n'})}),"\n",(0,i.jsx)(t.h2,{id:"options-inherited-from-parent-commands",children:"Options Inherited from Parent Commands"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'      --chain-id string     The network chain ID\n      --home string         directory for config and data (default "/home/<yourSystemUsername>/.babylond")\n      --log_format string   The logging format (json|plain) (default "plain")\n      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")\n      --trace               print out full stack trace on errors\n'})})]})}function b(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>r});var i=n(6540);const o={},a=i.createContext(o);function l(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);