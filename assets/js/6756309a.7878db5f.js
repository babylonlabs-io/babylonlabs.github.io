"use strict";(self.webpackChunkdocument_sample=self.webpackChunkdocument_sample||[]).push([[7171],{3052:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var t=i(4848),l=i(8453);const o={id:"become-vigilante",sidebar_label:"Become a Vigilante",hide_table_of_contents:!0},r="Become a Babylon Vigilante",a={id:"user-guides/btc-staking-testnet/become-vigilante",title:"Become a Babylon Vigilante",description:"Learn how to run the Babylon Vigilante program.",source:"@site/docs/user-guides/btc-staking-testnet/become-vigilante.md",sourceDirName:"user-guides/btc-staking-testnet",slug:"/user-guides/btc-staking-testnet/become-vigilante",permalink:"/docs/user-guides/btc-staking-testnet/become-vigilante",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/user-guides/btc-staking-testnet/become-vigilante.md",tags:[],version:"current",frontMatter:{id:"become-vigilante",sidebar_label:"Become a Vigilante",hide_table_of_contents:!0},sidebar:"docs",previous:{title:"Stake with BTC Staker CLI",permalink:"/docs/user-guides/btc-staking-testnet/become-btc-staker"},next:{title:"BTC timestamping integration",permalink:"/docs/user-guides/btc-staking-testnet/czintegrate"}},s={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Deploy Vigilante Locally",id:"deploy-vigilante-locally",level:2},{value:"Reporter",id:"reporter",level:3},{value:"Submitter",id:"submitter",level:3},{value:"Monitor",id:"monitor",level:3},{value:"Deploy Vigilante Using Docker",id:"deploy-vigilante-using-docker",level:2},{value:"Reporter",id:"reporter-1",level:3},{value:"Submitter",id:"submitter-1",level:3},{value:"Monitor",id:"monitor-1",level:3},{value:"Buildx",id:"buildx",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",hr:"hr",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"become-a-babylon-vigilante",children:"Become a Babylon Vigilante"}),"\n",(0,t.jsx)(n.p,{children:"Learn how to run the Babylon Vigilante program."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.p,{children:["Vigilante programs are standalone programs that are run along-side with Babylon nodes.\nPeople run a vigilante program in three modes,\n",(0,t.jsx)(n.code,{children:"reporter"}),", ",(0,t.jsx)(n.code,{children:"submitter"}),", and\n",(0,t.jsx)(n.code,{children:"monitor"}),", each responsible to different aspects to the security of the Babylon network."]}),"\n",(0,t.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsxs)(n.p,{children:["First we need to have the access to a synced Babylon full node and a synced BTC full node.\nTo run a BTC full node, please follow the\n",(0,t.jsxs)(n.a,{href:"https://bitcoin.org/en/full-node",children:["instructions of running a ",(0,t.jsx)(n.code,{children:"bitcoind"})," full node"]})," or\nthe ",(0,t.jsxs)(n.a,{href:"https://github.com/btcsuite/btcd",children:["instructions of running a ",(0,t.jsx)(n.code,{children:"btcd"})," full node"]}),"\n(an alternative full node bitcoin implementation written in Golang).\nWe support the connections to both.\nTo run a Babylon full node, please follow this ",(0,t.jsx)(n.a,{href:"/docs/user-guides/btc-staking-testnet/setup-node",children:"guide"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"We specify the following paths:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'BABYLON_PATH="path_where_babylon_is_built" # example: $HOME/Projects/Babylon/babylon\nVIGILANTE_PATH="root_vigilante_dir" # example: $HOME/Projects/Babylon/vigilante\nTESTNET_PATH="path_where_the_testnet_files_will_be_stored" # example: $HOME/Projects/Babylon/babylon/.testnet\n'})}),"\n",(0,t.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,t.jsxs)(n.p,{children:["Create a directory which will store the vigilante configuration,\ncopy the sample vigilante configuration into a ",(0,t.jsx)(n.code,{children:"vigilante.yml"})," file, and\nadapt it to the specific requirements."]}),"\n",(0,t.jsxs)(n.p,{children:["Currently, the vigilante configuration should be edited manually.\nIn the future, we will add functionality for generating this file through\na script.\nFor Docker deployments, we have created the ",(0,t.jsx)(n.code,{children:"sample-vigilante-docker.yaml"}),"\nfile which contains a configuration that will work out of this box for this guide."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"cp sample-vigilante.yml $VIGILANTE_PATH/vigilante.yml\nnano $VIGILANTE_PATH/vigilante.yml # edit the config file to replace $TESTNET instances \n"})}),"\n",(0,t.jsx)(n.h2,{id:"deploy-vigilante-locally",children:"Deploy Vigilante Locally"}),"\n",(0,t.jsx)(n.h3,{id:"reporter",children:"Reporter"}),"\n",(0,t.jsx)(n.p,{children:"Run the vigilante reporter"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"go run $VIGILANTE_PATH/cmd/main.go reporter \\\n         --config $VIGILANTE_PATH/vigilante.yml \\\n         --babylon-key $BABYLON_KEY_DIR\n"})}),"\n",(0,t.jsxs)(n.p,{children:["where ",(0,t.jsx)(n.code,{children:"$BABYLON_KEY_DIR"})," stores the keyring that will be used to submit BTC headers and checkpoints to Babylon."]}),"\n",(0,t.jsx)(n.h3,{id:"submitter",children:"Submitter"}),"\n",(0,t.jsx)(n.p,{children:"Similarly, run the vigilante submitter"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"go run $VIGILANTE_PATH/cmd/main.go submitter \\\n         --config $VIGILANTE_PATH/vigilante.yml\n"})}),"\n",(0,t.jsx)(n.h3,{id:"monitor",children:"Monitor"}),"\n",(0,t.jsxs)(n.p,{children:["The monitor mode requires the genesis file of Babylon as an additional parameter,\nwhich is stored under ",(0,t.jsx)(n.code,{children:"$BABYLON_NODE_PATH/config/genesis.json"}),".\nTo run the vigilante monitor"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"go run $VIGILANTE_PATH/cmd/main.go monitor \\\n         --genesis $BABYLON_NODE_PATH/config/genesis.json\n         --config $VIGILANTE_PATH/vigilante.yml\n"})}),"\n",(0,t.jsx)(n.h2,{id:"deploy-vigilante-using-docker",children:"Deploy Vigilante Using Docker"}),"\n",(0,t.jsx)(n.h3,{id:"reporter-1",children:"Reporter"}),"\n",(0,t.jsxs)(n.p,{children:["Initially, build a Docker image named ",(0,t.jsx)(n.code,{children:"babylonlabs-io/vigilante-reporter"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"cp sample-vigilante-docker.yml $VIGILANTE_PATH/vigilante.yml\nmake reporter-build\n"})}),"\n",(0,t.jsx)(n.p,{children:"Afterwards, run the above image and attach the directories\nthat contain the configuration for Babylon, Bitcoin, and the vigilante."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"docker run --rm \\\n         -v $TESTNET_PATH/bitcoin:/bitcoin \\\n         -v $BABYLON_NODE_PATH:/babylon \\\n         -v $VIGILANTE_PATH:/vigilante \\\n         babylonlabs-io/vigilante-reporter\n"})}),"\n",(0,t.jsx)(n.h3,{id:"submitter-1",children:"Submitter"}),"\n",(0,t.jsxs)(n.p,{children:["Follow the same steps as above, but with the ",(0,t.jsx)(n.code,{children:"babylonlabs-io/vigilante-submitter"})," Docker image."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"docker run --rm \\\n         -v $TESTNET_PATH/bitcoin:/bitcoin \\\n         -v $BABYLON_NODE_PATH:/babylon \\\n         -v $VIGILANTE_PATH:/vigilante \\\n         babylonlabs-io/vigilante-submitter\n"})}),"\n",(0,t.jsx)(n.h3,{id:"monitor-1",children:"Monitor"}),"\n",(0,t.jsxs)(n.p,{children:["Follow the same steps as above, but with the ",(0,t.jsx)(n.code,{children:"babylonlabs-io/vigilante-monitor"})," Docker image."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"docker run --rm \\\n         -v $TESTNET_PATH/bitcoin:/bitcoin \\\n         -v $BABYLON_NODE_PATH:/babylon \\\n         -v $VIGILANTE_PATH:/vigilante \\\n         babylonlabs-io/vigilante-monitor\n"})}),"\n",(0,t.jsx)(n.h3,{id:"buildx",children:"Buildx"}),"\n",(0,t.jsxs)(n.p,{children:["The above ",(0,t.jsx)(n.code,{children:"Dockerfile"}),"s are also compatible with Docker's\n",(0,t.jsx)(n.a,{href:"https://docs.docker.com/desktop/multi-arch/",children:"buildx feature"}),"\nthat allows multi-architectural builds. To have a multi-architectural build,"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"docker buildx create --use\nmake reporter-buildx  # for the reporter\nmake submitter-buildx # for the submitter\nmake monitor-buildx # for the monitor\n"})})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>a});var t=i(6540);const l={},o=t.createContext(l);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);