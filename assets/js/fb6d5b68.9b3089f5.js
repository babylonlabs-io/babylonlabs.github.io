"use strict";(self.webpackChunkdocument_sample=self.webpackChunkdocument_sample||[]).push([[6778],{2323:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>b,frontMatter:()=>a,metadata:()=>r,toc:()=>l});var i=n(4848),o=n(8453);const a={id:"babylond_testnet",sidebar_label:"babylond testnet",hide_table_of_contents:!0},s="babylond testnet",r={id:"cli/babylond/babylond_testnet",title:"babylond testnet",description:"Initialize the files for a Babylon testnet.",source:"@site/docs/cli/babylond/Babylond_testnet.md",sourceDirName:"cli/babylond",slug:"/cli/babylond/babylond_testnet",permalink:"/docs/cli/babylond/babylond_testnet",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/cli/babylond/Babylond_testnet.md",tags:[],version:"current",frontMatter:{id:"babylond_testnet",sidebar_label:"babylond testnet",hide_table_of_contents:!0},sidebar:"docs",previous:{title:"babylond tendermint version",permalink:"/docs/cli/babylond/Babylond_tendermint/babylond_tendermint_version"},next:{title:"babylond tx",permalink:"/docs/cli/babylond/babylond_tx"}},d={},l=[{value:"testnet command",id:"testnet-command",level:2},{value:"Options",id:"options",level:2},{value:"Options Inherited from Parent Commands",id:"options-inherited-from-parent-commands",level:2}];function c(e){const t={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"babylond-testnet",children:"babylond testnet"}),"\n",(0,i.jsx)(t.p,{children:"Initialize the files for a Babylon testnet."}),"\n",(0,i.jsx)(t.h2,{id:"testnet-command",children:"testnet command"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"babylond testnet [flags]\n"})}),"\n",(0,i.jsx)(t.h2,{id:"options",children:"Options"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'      --additional-sender-account       If there should be additional pre funded account per validator\n      --algo string                     Key signing algorithm to generate keys for (default "secp256k1")\n      --btc-base-header string          Hex of the base Bitcoin header. (default "0100000000000000000000000000000000000000000000000000000000000000000000003ba3edfd7a7b12b27ac72c3e67768f617fc81bc3888a51323a9fb8aa4b1e5e4a45068653ffff7f2002000000")\n      --btc-base-header-height uint     Height of the base Bitcoin header.\n      --btc-checkpoint-tag string       Tag to use for Bitcoin checkpoints. (default "bbt0")\n      --btc-confirmation-depth uint     Confirmation depth for Bitcoin headers. (default 6)\n      --btc-finalization-timeout uint   Finalization timeout for Bitcoin headers. (default 20)\n      --btc-network string              Bitcoin network to use. Available networks: simnet, testnet, regtest, mainnet (default "simnet")\n      --chain-id string                 genesis file chain-id, if left blank will be randomly created\n      --epoch-interval uint             Number of blocks between epochs. Must be more than 0. (default 400)\n      --genesis-time int                Genesis time (default 1672122091)\n  -h, --help                            help for testnet\n      --keyring-backend string          Select keyring\'s backend (os|file|test) (default "os")\n      --max-active-validators uint32    Maximum number of validators. (default 10)\n      --minimum-gas-prices string       Minimum gas prices to accept for transactions; All fees in a tx must meet this minimum (e.g. 0.001bbn) (default "0.000006ubbn")\n      --node-daemon-home string         Home directory of the node\'s daemon configuration (default "babylond")\n      --node-dir-prefix string          Prefix the directory name for each node with (node results in node0, node1, ...) (default "node")\n  -o, --output-dir string               Directory to store initialization data for the testnet (default "./mytestnet")\n      --starting-ip-address string      Starting IP address (192.168.0.1 results in persistent peers list ID0@192.168.0.1:46656, ID1@192.168.0.2:46656, ...) (default "192.168.0.1")\n      --v int                           Number of validators to initialize the testnet with (default 4)\n'})}),"\n",(0,i.jsx)(t.h2,{id:"options-inherited-from-parent-commands",children:"Options Inherited from Parent Commands"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'      --home string         directory for config and data (default "/home/<yourSystemUsername>/.babylond")\n      --log_format string   The logging format (json|plain) (default "plain")\n      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")\n      --trace               print out full stack trace on errors\n'})})]})}function b(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>r});var i=n(6540);const o={},a=i.createContext(o);function s(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);