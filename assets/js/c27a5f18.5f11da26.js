"use strict";(self.webpackChunkdocument_sample=self.webpackChunkdocument_sample||[]).push([[4794],{734:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var t=i(4848),a=i(8453);const o={id:"global-params",sidebar_label:"Global System Configuration",hide_table_of_contents:!1},r="Global System Configuration",s={id:"user-guides/bitcoin-staking-phase1/backend-deployment/global-params",title:"Global System Configuration",description:"1. Staking Parameters",source:"@site/docs/user-guides/bitcoin-staking-phase1/backend-deployment/global-system-configuration.md",sourceDirName:"user-guides/bitcoin-staking-phase1/backend-deployment",slug:"/user-guides/bitcoin-staking-phase1/backend-deployment/global-params",permalink:"/docs/user-guides/bitcoin-staking-phase1/backend-deployment/global-params",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/user-guides/bitcoin-staking-phase1/backend-deployment/global-system-configuration.md",tags:[],version:"current",frontMatter:{id:"global-params",sidebar_label:"Global System Configuration",hide_table_of_contents:!1},sidebar:"docs",previous:{title:"Staking Expiry Checker",permalink:"/docs/user-guides/bitcoin-staking-phase1/backend-deployment/services/staking-expiry-checker"},next:{title:"Bitcoin Staking Testnet-4",permalink:"/docs/user-guides/testnet4"}},l={},c=[{value:"1. Staking Parameters",id:"1-staking-parameters",level:2},{value:"2. Finality Providers",id:"2-finality-providers",level:2},{value:"2.1 Accessing Individual Finality Provider Information",id:"21-accessing-individual-finality-provider-information",level:3},{value:"2.2 Generating Concatenated Finality Provider Information",id:"22-generating-concatenated-finality-provider-information",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"global-system-configuration",children:"Global System Configuration"}),"\n",(0,t.jsx)(n.h2,{id:"1-staking-parameters",children:"1. Staking Parameters"}),"\n",(0,t.jsx)(n.p,{children:"The Global Configuration includes versioned governance parameters\nthat specify what constitutes a valid staking transaction\nthat should be considered as an active one for the lock-only system."}),"\n",(0,t.jsxs)(n.p,{children:["Detailed information can be found\n",(0,t.jsx)(n.a,{href:"https://github.com/babylonlabs-io/networks/blob/60fa3a395a22c23b2a1f06ca9ea680535cce54eb/bbn-1/parameters",children:"here"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Each lock-only network maintains its own set of versioned global parameters:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/babylonlabs-io/networks/blob/60fa3a395a22c23b2a1f06ca9ea680535cce54eb/bbn-1/parameters/global-params.json",children:"Mainnet"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"2-finality-providers",children:"2. Finality Providers"}),"\n",(0,t.jsxs)(n.p,{children:["Finality providers can accept delegations from BTC stakers.\nFor more details, please visit\n",(0,t.jsx)(n.a,{href:"https://github.com/babylonlabs-io/networks/tree/8cdcbf78bbc95ae7136c7998ae5ff55b88031cf9/bbn-1/finality-providers",children:"this link"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"The Finality provider information registry stores additional information\nsuch as the finality provider's moniker, website, and identity."}),"\n",(0,t.jsx)(n.p,{children:"There are many registries that might exist, and it is up to the staking provider\nto utilize a source of information that best fits their requirements.\nThis document uses the registry information maintained by Babylon."}),"\n",(0,t.jsx)(n.h3,{id:"21-accessing-individual-finality-provider-information",children:"2.1 Accessing Individual Finality Provider Information"}),"\n",(0,t.jsx)(n.p,{children:"Finality provider information is available in individual JSON files within the\nfinality provider registry. You can find these files in the following directory,\ndepending on the network:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/babylonlabs-io/networks/tree/8cdcbf78bbc95ae7136c7998ae5ff55b88031cf9/bbn-1/finality-providers/registry",children:"Mainnet"})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Each JSON file contains information in the following format:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-JSON",children:'{\n  "description": {\n    "moniker": "<moniker>",\n    "identity": "<identity>",\n    "website": "<website>",\n    "security_contact": "<security_contact>",\n    "details": "<details>"\n  },\n  "btc_pk": "<eots_btc_pk>",\n  "commission": "<commission_decimal>",\n  "deposit": {\n    "tx_hash": "tx_hash",\n    "signed_tx": "signed_tx_hex"\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"22-generating-concatenated-finality-provider-information",children:"2.2 Generating Concatenated Finality Provider Information"}),"\n",(0,t.jsx)(n.p,{children:"The concatenated Finality Provider information file is essential for backend\nservices that require a unified view of all finality provider information."}),"\n",(0,t.jsxs)(n.p,{children:["To generate a concatenated JSON file from the individual JSON files,\nuse the following reference script.\nDepending on the network, you can change the corresponding directory ",(0,t.jsx)(n.code,{children:"DIR"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["testnet: ",(0,t.jsx)(n.code,{children:'export DIR="./networks/bbn-1/finality-providers/registry"'})]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'echo \'\n# Clone the repository\ngit clone git@github.com:babylonlabs-io/networks.git\n\n# Output files\nOUTPUT="temp.json"\nFINAL="finality-providers.json"\n\n# Start the JSON object and array\necho "{" > $OUTPUT\necho "\\"finality_providers\\": [" >> $OUTPUT\n\n# Iterate over JSON files and append them to the output file\nfor file in "$DIR"/*.json; do\n    cat "$file" >> $OUTPUT\n    echo "," >> $OUTPUT\ndone\n\n# Remove the last comma and close the JSON array and object\ntruncate -s-2 $OUTPUT\necho "]" >> $OUTPUT\necho "}" >> $OUTPUT\n\n# Beautify the final JSON output\ncat $OUTPUT | jq . > $FINAL\n\' > generate_finality_providers.sh && bash generate_finality_providers.sh\n'})}),"\n",(0,t.jsx)(n.p,{children:"This script clones the Babylon networks repository,\nnavigates to the specified directory,\niterate over JSON files and\nappend them to the output file containing all Finality provider information."})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>s});var t=i(6540);const a={},o=t.createContext(a);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);